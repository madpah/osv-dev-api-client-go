/*
OSV

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osvdev

import (
	"encoding/json"
	"fmt"
)

// OsvRangeType Type of the version information.
type OsvRangeType string

// List of osvRangeType
const (
	OSVRANGETYPE_UNSPECIFIED OsvRangeType = "UNSPECIFIED"
	OSVRANGETYPE_GIT OsvRangeType = "GIT"
	OSVRANGETYPE_SEMVER OsvRangeType = "SEMVER"
	OSVRANGETYPE_ECOSYSTEM OsvRangeType = "ECOSYSTEM"
)

// All allowed values of OsvRangeType enum
var AllowedOsvRangeTypeEnumValues = []OsvRangeType{
	"UNSPECIFIED",
	"GIT",
	"SEMVER",
	"ECOSYSTEM",
}

func (v *OsvRangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OsvRangeType(value)
	for _, existing := range AllowedOsvRangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OsvRangeType", value)
}

// NewOsvRangeTypeFromValue returns a pointer to a valid OsvRangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOsvRangeTypeFromValue(v string) (*OsvRangeType, error) {
	ev := OsvRangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OsvRangeType: valid values are %v", v, AllowedOsvRangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OsvRangeType) IsValid() bool {
	for _, existing := range AllowedOsvRangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to osvRangeType value
func (v OsvRangeType) Ptr() *OsvRangeType {
	return &v
}

type NullableOsvRangeType struct {
	value *OsvRangeType
	isSet bool
}

func (v NullableOsvRangeType) Get() *OsvRangeType {
	return v.value
}

func (v *NullableOsvRangeType) Set(val *OsvRangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableOsvRangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableOsvRangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsvRangeType(val *OsvRangeType) *NullableOsvRangeType {
	return &NullableOsvRangeType{value: val, isSet: true}
}

func (v NullableOsvRangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsvRangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

