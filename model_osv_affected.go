/*
OSV

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osvdev

import (
	"encoding/json"
)

// checks if the OsvAffected type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsvAffected{}

// OsvAffected Affected versions and commits.
type OsvAffected struct {
	// Optional. JSON object holding additional information about the vulnerability as defined by the database for which the record applies.
	DatabaseSpecific map[string]interface{} `json:"databaseSpecific,omitempty"`
	// Optional. JSON object holding additional information about the vulnerability as defined by the ecosystem for which the record applies.
	EcosystemSpecific map[string]interface{} `json:"ecosystemSpecific,omitempty"`
	Package *OsvPackage `json:"package,omitempty"`
	// Required. Range information.
	Ranges []OsvRange `json:"ranges,omitempty"`
	// Optional. Severity of the vulnerability for this package.
	Severity []OsvSeverity `json:"severity,omitempty"`
	// Optional. List of affected versions.
	Versions []string `json:"versions,omitempty"`
}

// NewOsvAffected instantiates a new OsvAffected object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsvAffected() *OsvAffected {
	this := OsvAffected{}
	return &this
}

// NewOsvAffectedWithDefaults instantiates a new OsvAffected object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsvAffectedWithDefaults() *OsvAffected {
	this := OsvAffected{}
	return &this
}

// GetDatabaseSpecific returns the DatabaseSpecific field value if set, zero value otherwise.
func (o *OsvAffected) GetDatabaseSpecific() map[string]interface{} {
	if o == nil || IsNil(o.DatabaseSpecific) {
		var ret map[string]interface{}
		return ret
	}
	return o.DatabaseSpecific
}

// GetDatabaseSpecificOk returns a tuple with the DatabaseSpecific field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvAffected) GetDatabaseSpecificOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DatabaseSpecific) {
		return map[string]interface{}{}, false
	}
	return o.DatabaseSpecific, true
}

// HasDatabaseSpecific returns a boolean if a field has been set.
func (o *OsvAffected) HasDatabaseSpecific() bool {
	if o != nil && !IsNil(o.DatabaseSpecific) {
		return true
	}

	return false
}

// SetDatabaseSpecific gets a reference to the given map[string]interface{} and assigns it to the DatabaseSpecific field.
func (o *OsvAffected) SetDatabaseSpecific(v map[string]interface{}) {
	o.DatabaseSpecific = v
}

// GetEcosystemSpecific returns the EcosystemSpecific field value if set, zero value otherwise.
func (o *OsvAffected) GetEcosystemSpecific() map[string]interface{} {
	if o == nil || IsNil(o.EcosystemSpecific) {
		var ret map[string]interface{}
		return ret
	}
	return o.EcosystemSpecific
}

// GetEcosystemSpecificOk returns a tuple with the EcosystemSpecific field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvAffected) GetEcosystemSpecificOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.EcosystemSpecific) {
		return map[string]interface{}{}, false
	}
	return o.EcosystemSpecific, true
}

// HasEcosystemSpecific returns a boolean if a field has been set.
func (o *OsvAffected) HasEcosystemSpecific() bool {
	if o != nil && !IsNil(o.EcosystemSpecific) {
		return true
	}

	return false
}

// SetEcosystemSpecific gets a reference to the given map[string]interface{} and assigns it to the EcosystemSpecific field.
func (o *OsvAffected) SetEcosystemSpecific(v map[string]interface{}) {
	o.EcosystemSpecific = v
}

// GetPackage returns the Package field value if set, zero value otherwise.
func (o *OsvAffected) GetPackage() OsvPackage {
	if o == nil || IsNil(o.Package) {
		var ret OsvPackage
		return ret
	}
	return *o.Package
}

// GetPackageOk returns a tuple with the Package field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvAffected) GetPackageOk() (*OsvPackage, bool) {
	if o == nil || IsNil(o.Package) {
		return nil, false
	}
	return o.Package, true
}

// HasPackage returns a boolean if a field has been set.
func (o *OsvAffected) HasPackage() bool {
	if o != nil && !IsNil(o.Package) {
		return true
	}

	return false
}

// SetPackage gets a reference to the given OsvPackage and assigns it to the Package field.
func (o *OsvAffected) SetPackage(v OsvPackage) {
	o.Package = &v
}

// GetRanges returns the Ranges field value if set, zero value otherwise.
func (o *OsvAffected) GetRanges() []OsvRange {
	if o == nil || IsNil(o.Ranges) {
		var ret []OsvRange
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvAffected) GetRangesOk() ([]OsvRange, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *OsvAffected) HasRanges() bool {
	if o != nil && !IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given []OsvRange and assigns it to the Ranges field.
func (o *OsvAffected) SetRanges(v []OsvRange) {
	o.Ranges = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *OsvAffected) GetSeverity() []OsvSeverity {
	if o == nil || IsNil(o.Severity) {
		var ret []OsvSeverity
		return ret
	}
	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvAffected) GetSeverityOk() ([]OsvSeverity, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *OsvAffected) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given []OsvSeverity and assigns it to the Severity field.
func (o *OsvAffected) SetSeverity(v []OsvSeverity) {
	o.Severity = v
}

// GetVersions returns the Versions field value if set, zero value otherwise.
func (o *OsvAffected) GetVersions() []string {
	if o == nil || IsNil(o.Versions) {
		var ret []string
		return ret
	}
	return o.Versions
}

// GetVersionsOk returns a tuple with the Versions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvAffected) GetVersionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Versions) {
		return nil, false
	}
	return o.Versions, true
}

// HasVersions returns a boolean if a field has been set.
func (o *OsvAffected) HasVersions() bool {
	if o != nil && !IsNil(o.Versions) {
		return true
	}

	return false
}

// SetVersions gets a reference to the given []string and assigns it to the Versions field.
func (o *OsvAffected) SetVersions(v []string) {
	o.Versions = v
}

func (o OsvAffected) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsvAffected) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatabaseSpecific) {
		toSerialize["databaseSpecific"] = o.DatabaseSpecific
	}
	if !IsNil(o.EcosystemSpecific) {
		toSerialize["ecosystemSpecific"] = o.EcosystemSpecific
	}
	if !IsNil(o.Package) {
		toSerialize["package"] = o.Package
	}
	if !IsNil(o.Ranges) {
		toSerialize["ranges"] = o.Ranges
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Versions) {
		toSerialize["versions"] = o.Versions
	}
	return toSerialize, nil
}

type NullableOsvAffected struct {
	value *OsvAffected
	isSet bool
}

func (v NullableOsvAffected) Get() *OsvAffected {
	return v.value
}

func (v *NullableOsvAffected) Set(val *OsvAffected) {
	v.value = val
	v.isSet = true
}

func (v NullableOsvAffected) IsSet() bool {
	return v.isSet
}

func (v *NullableOsvAffected) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsvAffected(val *OsvAffected) *NullableOsvAffected {
	return &NullableOsvAffected{value: val, isSet: true}
}

func (v NullableOsvAffected) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsvAffected) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


