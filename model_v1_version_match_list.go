/*
OSV

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osvdev

import (
	"encoding/json"
)

// checks if the V1VersionMatchList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1VersionMatchList{}

// V1VersionMatchList Result of DetmineVersion.
type V1VersionMatchList struct {
	Matches []V1VersionMatch `json:"matches,omitempty"`
}

// NewV1VersionMatchList instantiates a new V1VersionMatchList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1VersionMatchList() *V1VersionMatchList {
	this := V1VersionMatchList{}
	return &this
}

// NewV1VersionMatchListWithDefaults instantiates a new V1VersionMatchList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1VersionMatchListWithDefaults() *V1VersionMatchList {
	this := V1VersionMatchList{}
	return &this
}

// GetMatches returns the Matches field value if set, zero value otherwise.
func (o *V1VersionMatchList) GetMatches() []V1VersionMatch {
	if o == nil || IsNil(o.Matches) {
		var ret []V1VersionMatch
		return ret
	}
	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VersionMatchList) GetMatchesOk() ([]V1VersionMatch, bool) {
	if o == nil || IsNil(o.Matches) {
		return nil, false
	}
	return o.Matches, true
}

// HasMatches returns a boolean if a field has been set.
func (o *V1VersionMatchList) HasMatches() bool {
	if o != nil && !IsNil(o.Matches) {
		return true
	}

	return false
}

// SetMatches gets a reference to the given []V1VersionMatch and assigns it to the Matches field.
func (o *V1VersionMatchList) SetMatches(v []V1VersionMatch) {
	o.Matches = v
}

func (o V1VersionMatchList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1VersionMatchList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Matches) {
		toSerialize["matches"] = o.Matches
	}
	return toSerialize, nil
}

type NullableV1VersionMatchList struct {
	value *V1VersionMatchList
	isSet bool
}

func (v NullableV1VersionMatchList) Get() *V1VersionMatchList {
	return v.value
}

func (v *NullableV1VersionMatchList) Set(val *V1VersionMatchList) {
	v.value = val
	v.isSet = true
}

func (v NullableV1VersionMatchList) IsSet() bool {
	return v.isSet
}

func (v *NullableV1VersionMatchList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1VersionMatchList(val *V1VersionMatchList) *NullableV1VersionMatchList {
	return &NullableV1VersionMatchList{value: val, isSet: true}
}

func (v NullableV1VersionMatchList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1VersionMatchList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


