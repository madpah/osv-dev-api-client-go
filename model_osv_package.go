/*
OSV

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osvdev

import (
	"encoding/json"
)

// checks if the OsvPackage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsvPackage{}

// OsvPackage Package information and version.
type OsvPackage struct {
	// Required. The ecosystem for this package.  For the complete list of valid ecosystem names, see <https://ossf.github.io/osv-schema/#affectedpackage-field>.
	Ecosystem *string `json:"ecosystem,omitempty"`
	// Required. Name of the package. Should match the name used in the package ecosystem (e.g. the npm package name). For C/C++ projects integrated in OSS-Fuzz, this is the name used for the integration.
	Name *string `json:"name,omitempty"`
	// Optional. The package URL for this package.
	Purl *string `json:"purl,omitempty"`
}

// NewOsvPackage instantiates a new OsvPackage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsvPackage() *OsvPackage {
	this := OsvPackage{}
	return &this
}

// NewOsvPackageWithDefaults instantiates a new OsvPackage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsvPackageWithDefaults() *OsvPackage {
	this := OsvPackage{}
	return &this
}

// GetEcosystem returns the Ecosystem field value if set, zero value otherwise.
func (o *OsvPackage) GetEcosystem() string {
	if o == nil || IsNil(o.Ecosystem) {
		var ret string
		return ret
	}
	return *o.Ecosystem
}

// GetEcosystemOk returns a tuple with the Ecosystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvPackage) GetEcosystemOk() (*string, bool) {
	if o == nil || IsNil(o.Ecosystem) {
		return nil, false
	}
	return o.Ecosystem, true
}

// HasEcosystem returns a boolean if a field has been set.
func (o *OsvPackage) HasEcosystem() bool {
	if o != nil && !IsNil(o.Ecosystem) {
		return true
	}

	return false
}

// SetEcosystem gets a reference to the given string and assigns it to the Ecosystem field.
func (o *OsvPackage) SetEcosystem(v string) {
	o.Ecosystem = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OsvPackage) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvPackage) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OsvPackage) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OsvPackage) SetName(v string) {
	o.Name = &v
}

// GetPurl returns the Purl field value if set, zero value otherwise.
func (o *OsvPackage) GetPurl() string {
	if o == nil || IsNil(o.Purl) {
		var ret string
		return ret
	}
	return *o.Purl
}

// GetPurlOk returns a tuple with the Purl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvPackage) GetPurlOk() (*string, bool) {
	if o == nil || IsNil(o.Purl) {
		return nil, false
	}
	return o.Purl, true
}

// HasPurl returns a boolean if a field has been set.
func (o *OsvPackage) HasPurl() bool {
	if o != nil && !IsNil(o.Purl) {
		return true
	}

	return false
}

// SetPurl gets a reference to the given string and assigns it to the Purl field.
func (o *OsvPackage) SetPurl(v string) {
	o.Purl = &v
}

func (o OsvPackage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsvPackage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ecosystem) {
		toSerialize["ecosystem"] = o.Ecosystem
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Purl) {
		toSerialize["purl"] = o.Purl
	}
	return toSerialize, nil
}

type NullableOsvPackage struct {
	value *OsvPackage
	isSet bool
}

func (v NullableOsvPackage) Get() *OsvPackage {
	return v.value
}

func (v *NullableOsvPackage) Set(val *OsvPackage) {
	v.value = val
	v.isSet = true
}

func (v NullableOsvPackage) IsSet() bool {
	return v.isSet
}

func (v *NullableOsvPackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsvPackage(val *OsvPackage) *NullableOsvPackage {
	return &NullableOsvPackage{value: val, isSet: true}
}

func (v NullableOsvPackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsvPackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


