/*
OSV

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osvdev

import (
	"encoding/json"
)

// checks if the V1FileHash type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1FileHash{}

// V1FileHash Information about the files in the repository to identify the version.
type V1FileHash struct {
	// The file path inside the repository, relative to the repository root.
	FilePath *string `json:"filePath,omitempty"`
	Hash *string `json:"hash,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	HashType *string `json:"hashType,omitempty"`
}

// NewV1FileHash instantiates a new V1FileHash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1FileHash() *V1FileHash {
	this := V1FileHash{}
	return &this
}

// NewV1FileHashWithDefaults instantiates a new V1FileHash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1FileHashWithDefaults() *V1FileHash {
	this := V1FileHash{}
	return &this
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *V1FileHash) GetFilePath() string {
	if o == nil || IsNil(o.FilePath) {
		var ret string
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FileHash) GetFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.FilePath) {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *V1FileHash) HasFilePath() bool {
	if o != nil && !IsNil(o.FilePath) {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given string and assigns it to the FilePath field.
func (o *V1FileHash) SetFilePath(v string) {
	o.FilePath = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *V1FileHash) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FileHash) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *V1FileHash) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *V1FileHash) SetHash(v string) {
	o.Hash = &v
}

// GetHashType returns the HashType field value if set, zero value otherwise.
func (o *V1FileHash) GetHashType() string {
	if o == nil || IsNil(o.HashType) {
		var ret string
		return ret
	}
	return *o.HashType
}

// GetHashTypeOk returns a tuple with the HashType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1FileHash) GetHashTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HashType) {
		return nil, false
	}
	return o.HashType, true
}

// HasHashType returns a boolean if a field has been set.
func (o *V1FileHash) HasHashType() bool {
	if o != nil && !IsNil(o.HashType) {
		return true
	}

	return false
}

// SetHashType gets a reference to the given string and assigns it to the HashType field.
func (o *V1FileHash) SetHashType(v string) {
	o.HashType = &v
}

func (o V1FileHash) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1FileHash) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilePath) {
		toSerialize["filePath"] = o.FilePath
	}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.HashType) {
		toSerialize["hashType"] = o.HashType
	}
	return toSerialize, nil
}

type NullableV1FileHash struct {
	value *V1FileHash
	isSet bool
}

func (v NullableV1FileHash) Get() *V1FileHash {
	return v.value
}

func (v *NullableV1FileHash) Set(val *V1FileHash) {
	v.value = val
	v.isSet = true
}

func (v NullableV1FileHash) IsSet() bool {
	return v.isSet
}

func (v *NullableV1FileHash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1FileHash(val *V1FileHash) *NullableV1FileHash {
	return &NullableV1FileHash{value: val, isSet: true}
}

func (v NullableV1FileHash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1FileHash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


