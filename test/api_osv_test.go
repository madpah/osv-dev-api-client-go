/*
OSV

Testing OSVAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package osvdev

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	osvdev "github.com/madpah/osv-dev-api-client-go"
)

func Test_osvdev_OSVAPIService(t *testing.T) {

	configuration := osvdev.NewConfiguration()
	apiClient := osvdev.NewAPIClient(configuration)

	t.Run("Test OSVAPIService OSVDetermineVersion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OSVAPI.OSVDetermineVersion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSVAPIService OSVGetVulnById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.OSVAPI.OSVGetVulnById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSVAPIService OSVQueryAffected", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OSVAPI.OSVQueryAffected(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OSVAPIService OSVQueryAffectedBatch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OSVAPI.OSVQueryAffectedBatch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
