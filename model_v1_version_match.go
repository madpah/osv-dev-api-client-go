/*
OSV

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osvdev

import (
	"encoding/json"
)

// checks if the V1VersionMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1VersionMatch{}

// V1VersionMatch Match information for the provided VersionQuery.
type V1VersionMatch struct {
	// CPE 2.3.
	Cpe23 *string `json:"cpe23,omitempty"`
	OsvIdentifier *OsvPackage `json:"osvIdentifier,omitempty"`
	RepoInfo *V1VersionRepositoryInformation `json:"repoInfo,omitempty"`
	// Score in the interval (0.0, 1.0] with 1.0 being a perfect match.
	Score *float64 `json:"score,omitempty"`
}

// NewV1VersionMatch instantiates a new V1VersionMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1VersionMatch() *V1VersionMatch {
	this := V1VersionMatch{}
	return &this
}

// NewV1VersionMatchWithDefaults instantiates a new V1VersionMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1VersionMatchWithDefaults() *V1VersionMatch {
	this := V1VersionMatch{}
	return &this
}

// GetCpe23 returns the Cpe23 field value if set, zero value otherwise.
func (o *V1VersionMatch) GetCpe23() string {
	if o == nil || IsNil(o.Cpe23) {
		var ret string
		return ret
	}
	return *o.Cpe23
}

// GetCpe23Ok returns a tuple with the Cpe23 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VersionMatch) GetCpe23Ok() (*string, bool) {
	if o == nil || IsNil(o.Cpe23) {
		return nil, false
	}
	return o.Cpe23, true
}

// HasCpe23 returns a boolean if a field has been set.
func (o *V1VersionMatch) HasCpe23() bool {
	if o != nil && !IsNil(o.Cpe23) {
		return true
	}

	return false
}

// SetCpe23 gets a reference to the given string and assigns it to the Cpe23 field.
func (o *V1VersionMatch) SetCpe23(v string) {
	o.Cpe23 = &v
}

// GetOsvIdentifier returns the OsvIdentifier field value if set, zero value otherwise.
func (o *V1VersionMatch) GetOsvIdentifier() OsvPackage {
	if o == nil || IsNil(o.OsvIdentifier) {
		var ret OsvPackage
		return ret
	}
	return *o.OsvIdentifier
}

// GetOsvIdentifierOk returns a tuple with the OsvIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VersionMatch) GetOsvIdentifierOk() (*OsvPackage, bool) {
	if o == nil || IsNil(o.OsvIdentifier) {
		return nil, false
	}
	return o.OsvIdentifier, true
}

// HasOsvIdentifier returns a boolean if a field has been set.
func (o *V1VersionMatch) HasOsvIdentifier() bool {
	if o != nil && !IsNil(o.OsvIdentifier) {
		return true
	}

	return false
}

// SetOsvIdentifier gets a reference to the given OsvPackage and assigns it to the OsvIdentifier field.
func (o *V1VersionMatch) SetOsvIdentifier(v OsvPackage) {
	o.OsvIdentifier = &v
}

// GetRepoInfo returns the RepoInfo field value if set, zero value otherwise.
func (o *V1VersionMatch) GetRepoInfo() V1VersionRepositoryInformation {
	if o == nil || IsNil(o.RepoInfo) {
		var ret V1VersionRepositoryInformation
		return ret
	}
	return *o.RepoInfo
}

// GetRepoInfoOk returns a tuple with the RepoInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VersionMatch) GetRepoInfoOk() (*V1VersionRepositoryInformation, bool) {
	if o == nil || IsNil(o.RepoInfo) {
		return nil, false
	}
	return o.RepoInfo, true
}

// HasRepoInfo returns a boolean if a field has been set.
func (o *V1VersionMatch) HasRepoInfo() bool {
	if o != nil && !IsNil(o.RepoInfo) {
		return true
	}

	return false
}

// SetRepoInfo gets a reference to the given V1VersionRepositoryInformation and assigns it to the RepoInfo field.
func (o *V1VersionMatch) SetRepoInfo(v V1VersionRepositoryInformation) {
	o.RepoInfo = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *V1VersionMatch) GetScore() float64 {
	if o == nil || IsNil(o.Score) {
		var ret float64
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1VersionMatch) GetScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *V1VersionMatch) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float64 and assigns it to the Score field.
func (o *V1VersionMatch) SetScore(v float64) {
	o.Score = &v
}

func (o V1VersionMatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1VersionMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cpe23) {
		toSerialize["cpe23"] = o.Cpe23
	}
	if !IsNil(o.OsvIdentifier) {
		toSerialize["osvIdentifier"] = o.OsvIdentifier
	}
	if !IsNil(o.RepoInfo) {
		toSerialize["repoInfo"] = o.RepoInfo
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	return toSerialize, nil
}

type NullableV1VersionMatch struct {
	value *V1VersionMatch
	isSet bool
}

func (v NullableV1VersionMatch) Get() *V1VersionMatch {
	return v.value
}

func (v *NullableV1VersionMatch) Set(val *V1VersionMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableV1VersionMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableV1VersionMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1VersionMatch(val *V1VersionMatch) *NullableV1VersionMatch {
	return &NullableV1VersionMatch{value: val, isSet: true}
}

func (v NullableV1VersionMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1VersionMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


