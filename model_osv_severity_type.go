/*
OSV

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osvdev

import (
	"encoding/json"
	"fmt"
)

// OsvSeverityType Type of the severity.
type OsvSeverityType string

// List of osvSeverityType
const (
	OSVSEVERITYTYPE_UNSPECIFIED OsvSeverityType = "UNSPECIFIED"
	OSVSEVERITYTYPE_CVSS_V4 OsvSeverityType = "CVSS_V4"
	OSVSEVERITYTYPE_CVSS_V3 OsvSeverityType = "CVSS_V3"
	OSVSEVERITYTYPE_CVSS_V2 OsvSeverityType = "CVSS_V2"
)

// All allowed values of OsvSeverityType enum
var AllowedOsvSeverityTypeEnumValues = []OsvSeverityType{
	"UNSPECIFIED",
	"CVSS_V4",
	"CVSS_V3",
	"CVSS_V2",
}

func (v *OsvSeverityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OsvSeverityType(value)
	for _, existing := range AllowedOsvSeverityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OsvSeverityType", value)
}

// NewOsvSeverityTypeFromValue returns a pointer to a valid OsvSeverityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOsvSeverityTypeFromValue(v string) (*OsvSeverityType, error) {
	ev := OsvSeverityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OsvSeverityType: valid values are %v", v, AllowedOsvSeverityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OsvSeverityType) IsValid() bool {
	for _, existing := range AllowedOsvSeverityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to osvSeverityType value
func (v OsvSeverityType) Ptr() *OsvSeverityType {
	return &v
}

type NullableOsvSeverityType struct {
	value *OsvSeverityType
	isSet bool
}

func (v NullableOsvSeverityType) Get() *OsvSeverityType {
	return v.value
}

func (v *NullableOsvSeverityType) Set(val *OsvSeverityType) {
	v.value = val
	v.isSet = true
}

func (v NullableOsvSeverityType) IsSet() bool {
	return v.isSet
}

func (v *NullableOsvSeverityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsvSeverityType(val *OsvSeverityType) *NullableOsvSeverityType {
	return &NullableOsvSeverityType{value: val, isSet: true}
}

func (v NullableOsvSeverityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsvSeverityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

