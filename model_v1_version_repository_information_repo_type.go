/*
OSV

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osvdev

import (
	"encoding/json"
	"fmt"
)

// V1VersionRepositoryInformationRepoType the model 'V1VersionRepositoryInformationRepoType'
type V1VersionRepositoryInformationRepoType string

// List of v1VersionRepositoryInformationRepoType
const (
	V1VERSIONREPOSITORYINFORMATIONREPOTYPE_UNSPECIFIED V1VersionRepositoryInformationRepoType = "UNSPECIFIED"
	V1VERSIONREPOSITORYINFORMATIONREPOTYPE_GIT V1VersionRepositoryInformationRepoType = "GIT"
)

// All allowed values of V1VersionRepositoryInformationRepoType enum
var AllowedV1VersionRepositoryInformationRepoTypeEnumValues = []V1VersionRepositoryInformationRepoType{
	"UNSPECIFIED",
	"GIT",
}

func (v *V1VersionRepositoryInformationRepoType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1VersionRepositoryInformationRepoType(value)
	for _, existing := range AllowedV1VersionRepositoryInformationRepoTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1VersionRepositoryInformationRepoType", value)
}

// NewV1VersionRepositoryInformationRepoTypeFromValue returns a pointer to a valid V1VersionRepositoryInformationRepoType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1VersionRepositoryInformationRepoTypeFromValue(v string) (*V1VersionRepositoryInformationRepoType, error) {
	ev := V1VersionRepositoryInformationRepoType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1VersionRepositoryInformationRepoType: valid values are %v", v, AllowedV1VersionRepositoryInformationRepoTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1VersionRepositoryInformationRepoType) IsValid() bool {
	for _, existing := range AllowedV1VersionRepositoryInformationRepoTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1VersionRepositoryInformationRepoType value
func (v V1VersionRepositoryInformationRepoType) Ptr() *V1VersionRepositoryInformationRepoType {
	return &v
}

type NullableV1VersionRepositoryInformationRepoType struct {
	value *V1VersionRepositoryInformationRepoType
	isSet bool
}

func (v NullableV1VersionRepositoryInformationRepoType) Get() *V1VersionRepositoryInformationRepoType {
	return v.value
}

func (v *NullableV1VersionRepositoryInformationRepoType) Set(val *V1VersionRepositoryInformationRepoType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1VersionRepositoryInformationRepoType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1VersionRepositoryInformationRepoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1VersionRepositoryInformationRepoType(val *V1VersionRepositoryInformationRepoType) *NullableV1VersionRepositoryInformationRepoType {
	return &NullableV1VersionRepositoryInformationRepoType{value: val, isSet: true}
}

func (v NullableV1VersionRepositoryInformationRepoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1VersionRepositoryInformationRepoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

