/*
OSV

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osvdev

import (
	"encoding/json"
)

// checks if the OsvRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OsvRange{}

// OsvRange Affected ranges.
type OsvRange struct {
	// Required. Version event information.
	Events []OsvEvent `json:"events,omitempty"`
	// Required if type is GIT. The publicly accessible URL of the repo that can be directly passed to clone commands.
	Repo *string `json:"repo,omitempty"`
	Type *OsvRangeType `json:"type,omitempty"`
}

// NewOsvRange instantiates a new OsvRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOsvRange() *OsvRange {
	this := OsvRange{}
	var type_ OsvRangeType = OSVRANGETYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// NewOsvRangeWithDefaults instantiates a new OsvRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOsvRangeWithDefaults() *OsvRange {
	this := OsvRange{}
	var type_ OsvRangeType = OSVRANGETYPE_UNSPECIFIED
	this.Type = &type_
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *OsvRange) GetEvents() []OsvEvent {
	if o == nil || IsNil(o.Events) {
		var ret []OsvEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvRange) GetEventsOk() ([]OsvEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *OsvRange) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []OsvEvent and assigns it to the Events field.
func (o *OsvRange) SetEvents(v []OsvEvent) {
	o.Events = v
}

// GetRepo returns the Repo field value if set, zero value otherwise.
func (o *OsvRange) GetRepo() string {
	if o == nil || IsNil(o.Repo) {
		var ret string
		return ret
	}
	return *o.Repo
}

// GetRepoOk returns a tuple with the Repo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvRange) GetRepoOk() (*string, bool) {
	if o == nil || IsNil(o.Repo) {
		return nil, false
	}
	return o.Repo, true
}

// HasRepo returns a boolean if a field has been set.
func (o *OsvRange) HasRepo() bool {
	if o != nil && !IsNil(o.Repo) {
		return true
	}

	return false
}

// SetRepo gets a reference to the given string and assigns it to the Repo field.
func (o *OsvRange) SetRepo(v string) {
	o.Repo = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OsvRange) GetType() OsvRangeType {
	if o == nil || IsNil(o.Type) {
		var ret OsvRangeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OsvRange) GetTypeOk() (*OsvRangeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OsvRange) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given OsvRangeType and assigns it to the Type field.
func (o *OsvRange) SetType(v OsvRangeType) {
	o.Type = &v
}

func (o OsvRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OsvRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.Repo) {
		toSerialize["repo"] = o.Repo
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableOsvRange struct {
	value *OsvRange
	isSet bool
}

func (v NullableOsvRange) Get() *OsvRange {
	return v.value
}

func (v *NullableOsvRange) Set(val *OsvRange) {
	v.value = val
	v.isSet = true
}

func (v NullableOsvRange) IsSet() bool {
	return v.isSet
}

func (v *NullableOsvRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOsvRange(val *OsvRange) *NullableOsvRange {
	return &NullableOsvRange{value: val, isSet: true}
}

func (v NullableOsvRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOsvRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


